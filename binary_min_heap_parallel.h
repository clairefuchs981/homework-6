#ifndef MIN_HEAP_PARALLEL_H
#define MIN_HEAP_PARALLEL_H
/* Vertex Wrapper element; for threads, this is the object we fill min heap with */ 
typedef struct dijkstra_vertex_ {
    Vertex *vertex;  // pointer to vertex in vertexlist
    int weight;      // weight generated by dijkstra
    bool in_heap;    // if this vertex is currently in heap
    int heap_index;  // index in heap
} DijkstraVertex;

/* Binary Min Heap; minimum element will be at root */
typedef struct binary_min_heap_ {
    int size;        // current size of heap
    DijkstraVertex **elems;  // list of all elements (vertices) in heap
} BinaryMinHeap;

/* Build binary min heap from list of vertices read in from input file */ 
BinaryMinHeap* make_binary_min_heap(DijkstraVertex **v_list, int size, int root_vertex);
/* Print current binary min heap */
void print_heap(BinaryMinHeap *min_heap);
/* Check if heap is empty */
bool is_empty(BinaryMinHeap *min_heap);
/* Delete minimum value in heap (root), then rebalance heap */
int del_min(BinaryMinHeap *min_heap);
/* Insert new Vertex in the heap */
void insert(BinaryMinHeap *min_heap, DijkstraVertex *vertex);
/* Runs when a vertex weight is updated, but element was already in heap. Attempt to readjust in either direction */
void update(BinaryMinHeap *min_heap, int vertex);
#endif